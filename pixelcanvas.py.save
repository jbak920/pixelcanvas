# Pixel Canvas main program
# Author: Jonathan Baker
#
# This script manages the display for the Pixel Canvas LED display.

import time
import rpi_ws281x
import argparse

CANVAS_WIDTH   = 20      # Number of pixels per row
CANVAS_HEIGHT  = 32      # Number of pixels per column
LED_PIN        = 18      # GPIO pin connected to the pixels (must support PWM!).
LED_FREQ_HZ    = 800000  # LED signal frequency in hertz (usually 800khz)
LED_DMA        = 5       # DMA channel to use for generating signal (try 5)
LED_BRIGHTNESS = 50     # Set to 0 for darkest and 255 for brightest
LED_INVERT     = False   # True to invert the signal (when using NPN transistor level shift)
INDICES	       = [i for i in range(CANVAS_WIDTH*CANVAS_HEIGHT]

def Color(red, green, blue, white = 0):
	"""Convert the provided red, green, blue color to a 24-bit color value.
	Each color component should be a value 0-255 where 0 is the lowest intensity
	and 255 is the highest intensity.
	"""
	return (white << 24) | (red << 16)| (green << 8) | blue

class PixelCanvas(object):
    def __init__(self, width, height, pin, freq_hz=800000, dma=5, invert=False,
			brightness=255):
        # 1D LED strip
        self._strip = rpi_ws281x.PixelStrip(width*height, LED_PIN, LED_FREQ_HZ, LED_DMA, LED_INVERT, LED_BRIGHTNESS)
        self._strip.begin()

        # Color data for each pixel, in list-of-lists format
        self._array = [[Color(0,i,j) for i in range(height)] for j in range(width)]

	# List to use for indices of led's (used for vectorization)
	self._indices = [i for i in range(width*height)]

    def array2strip(self):
        temp = [self._array[index] if index%2 is 0 else self._array[index][::-1] for index in range(len(self._array)) ]
        return [item for sublist in temp for item in sublist]

    def display(self):
        print(array2strip())

# Main program logic follows:
if __name__ == '__main__':
    # Process arguments
    parser = argparse.ArgumentParser()
    parser.add_argument('-c', '--clear', action='store_true', help='clear the display on exit')
    args = parser.parse_args()

    # Create PixelCanvas object with appropriate configuration.
    canvas = PixelCanvas(CANVAS_WIDTH, CANVAS_HEIGHT, LED_PIN, LED_FREQ_HZ, LED_DMA, LED_INVERT, LED_BRIGHTNESS)
    canvas._strip.begin()
    print ('Press Ctrl-C to quit.')

    print "Array: "
    print canvas._array
    print "Strip: "
    pr
